package com.dzc.learn.letcode;


/**
 * <p>
 * 当m=0或者n=0时候表示在第一行或者第一列上，没法go left or up，所以这些步骤上总是1个可选择的路径。
 * 其他的cell利用动态规划的思想来完成。(i, j)这个cell上的路径数等于P[i][j]，要不然从上面的cell过来，
 * 要不然从左边的cell过来，所以路径数等于P[i - 1][j] + P[i][j - 1]。
 * <p>
 * [1]
 * *****************************
 * [1, 1]
 * [1, 2]
 * *****************************
 * [1, 1, 1]
 * [1, 2, 3]
 * [1, 3, 6]
 * *****************************
 * [1, 1, 1, 1]
 * [1, 2, 3, 4]
 * [1, 3, 6, 10]
 * [1, 4, 10, 20]
 * *****************************
 * [1, 1, 1, 1, 1, 1, 1]
 * [1, 2, 3, 4, 5, 6, 7]
 * [1, 3, 6, 10, 15, 21, 28]
 * *****************************
 */
public class UniquePaths {


    /**
     *
     * @param m 行
     * @param n 列
     * @return unique Path number
     */
    public int uniquePaths(int m, int n) {
        int[][] arr = new int[m][n];
        // 初始化数组行列数
        // 由于规则，只能往右边移动，往下方移动
        // 所以初始化 第一行 所有步数 为1
        for (int i = 0; i < m; i++) {
            arr[i][0] = 1;
        }

        // 所以初始化 第一列 所有步数 为1
        for (int i = 0; i < n; i++) {
            arr[0][i] = 1;
        }

        // 动态规划 ; 每一步都等于 P[i][j] = P[i][j - 1] + P[i - 1][j]
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                arr[i][j] = arr[i][j - 1] + arr[i - 1][j];
            }
        }

        return arr[m - 1][n - 1];
    }

}
